@startuml

interface IModelActiveData {
    +getNumberOfRelevantFilesOverall(): int
    +getNumberOfFilesAlreadyProcessed(): int
    +getNumberOfFilesRemaining(): int
    +getCurrentlyProcessedFile(): Path
    +getListOfProcessedFiles(): List<Path>
    +getListOfRemainingFiles(): List<Path>
    +getListOfOverallFiles(): List<Path>
    +setters()...
}

interface IModelDecoratedActiveData {
    +getResult()
}

interface IModelObserver {
    +update(IModelActiveData)
}

interface IModelObservable {
    +addObserver(IModelObserver)
    +removeObserver(IModelObserver)
    +notifyObservers()
}

interface IModelPerformAction {
    +performAction(IModel) throws Exception
    +abort()
}

interface IModel {
    +setInputFolder(Path): void
    +setOutputFolder(Path): void
    +addFileSuffix(String): void
    +getInputFolder(): Path
    +getOutputFolder(): Path
    +getFileSuffixes(): List<String>
    --
    +isRunning(): boolean
    +abort():void
    --
    +getModelActiveData(): IModelActiveData
}

IModelPerformAction -> IModel

class PerformCopy implements IModelPerformAction
class PerformMove implements IModelPerformAction
class PerformRename implements IModelPerformAction
class PerformTestRun implements IModelPerformAction
class PerformCountRelevantFiles implements IModelPerformAction
class PerformValidate implements IModelPerformAction

interface IModelFilter {
    +isRelevant(String): boolean
}

package simple_model {

    class SimpleModel implements IModel {
        -Path inputPath
        -Path outputPath
        -List<String> fileSuffixes
        --
        -IFindFiles findFiles
        -IModelActiveData activData
    }

    interface IFindFiles {
        +List<Path> findFilesBySuffix(String)
        +List<Path> findFilesBySuffixes(List<String>)
    }
    class SimpleFindFiles implements IFindFiles
    class SimpleModelActiveData implements IModelActiveData {
        -List<Path> overallFiles
        -int numberOfAlreadyProcessedFiles
    }

}




enum EModelAction {
    RENAME
    COPY
    MOVE
}

interface IModelFacade {
    +performModelAction(Path, Path, List<String>, EModelAction)
}

IModelFacade -> EModelAction


interface IController {

}

interface IView {
    +createView()
}

class SimpleController implements IController

class Main {
    IModel model = new SimpleModel();
    IController controller = new SimpleController(model);
}

class MainForm implements IView {
    +MainForm(IModel)
    +createView()
    +startSwingApplication()
}

@enduml
