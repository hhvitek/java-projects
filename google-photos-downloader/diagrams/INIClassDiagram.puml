@startuml



package ini {
    interface IIniConfig {
        + getSection(String sectionName): IIniSection
        + getValue(String sectionName, String key): String
        + hasItem(String sectionName, String key): boolean
        + hasSection(String sectionName): boolean
        + load(File file): void
        + load(BufferedReader reader): void
        + store(File file): void
        + putSectionComment(String sectionName, String comment): void
        + putComment(String sectionName, String key, String comment): void
        + putHeaderComment(String comment): void
        + getSectionComment(String sectionName): String
        + getComment(String sectionName, String key): String
        + getHeaderComment(): String
        + putValue(String sectionName, String key, String value):void
        + toString(): String
    }

    interface IIniSection {
        + getValue(String key): String
        + hasItem(String key): boolean
        + putValue(String key, String value): void
        + putComment(String key, String comment): void
        + putSectionComment(String comment): void
        + getComment(String key): String
        + getSectionComment(): String
        + toString(): String
    }

    package myini {
        class CustomIIniConfig implements IIniConfig {
            - headerComment : String
            - sections : Map<String, IIniSection>
            - loader : IIniReader
        }
        class CustomIIniSection implements IIniSection {
            - name : String
            - comment : String
            - items : List<CustomItem>
        }
        class CustomItem {
            - key: String
            - value: String
            - comment: String
        }
    }

    package inireaders {
        interface IIniReader {
            + load(IIniConfig ini, File file): void
            + load(IIniConfig ini, BufferedReader reader): void
        }

        enum IniReaders {
            Fsm
            Chain
        }

        class FactoryReader {
            +{static} getIniReader(type: IniReaders): IIniReader
            +{static} getDefaultReader(): IIniReader
        }

        FactoryReader *-- IniReaders

        package fsm {
            class LineIniReader implements IIniReader {
            }
        }

        package chain {
            class ChainOfResponsibilityIniReader implements IIniReader {
                - processorChain: ProcessorChain
                - contextState: IContextState
            }
            class ProcessorChain {
                - processor : AbstractProcessor
                + processLine(IContextState state, String line): void
            }

            ProcessorChain o-- IContextState
            ChainOfResponsibilityIniReader *-- ProcessorChain
            ChainOfResponsibilityIniReader *-- IContextState

            interface IContextState {
                + addCommentLine(String line): void
                + setHeaderComment(): void
                + setActualSection(String sectionName): void
                + setItem(String key, String value): void
                + isError():void
                + setErrorMessage(String message):void
                + getErrorMessage(): void
            }

            class ContextState implements IContextState {
            }

            package processors {
                abstract class AbstractProcessor {
                    #nextProcessor: AbstractProcessor
                    +AbstractProcessor(AbstractProcessor nextProcessor)
                    +{abstract} processLine(String line): void
                }
                class BlankProcessor extends AbstractProcessor {
                }
                class CommentProcessor extends AbstractProcessor {
                }
                class ItemProcessor extends AbstractProcessor {
                }
                class SectionProcessor extends AbstractProcessor {
                }
                class InvalidStateProcessor extends AbstractProcessor {
                }
            }
        }

    }


}


@enduml
