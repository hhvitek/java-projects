@startuml

title "Downloader package"

package "app" {

package "downloader" {
    enum FactoryDownloaderType {
        IO,
        NIO
    }

    interface IDownloader {
        +setReplaceExisting(boolean): void
        +setTimeout(int): void
        +downloadItem(String, Path): void
    }

    class FactoryDownloader {
        {static} +getDownloader(FactoryDownloaderType): IDownloader
    }

    class IODownloader implements IDownloader
    note left of IODownloader: Files.copy(...)

    class NIODownloader implements IDownloader
    note left of NIODownloader
        fileChannel.transferFrom(...);
    end note
}

package "photos" {
    interface IGooglePhotosBuilder {
        +setStartDate(String startDate): IGooglePhotosBuilder
        +setRefreshToken(String refreshToken): IGooglePhotosBuilder
        +setLocalPhotoFolder(Path localPhotoFolder): IGooglePhotosBuilder
        +setClientId(String clientId): IGooglePhotosBuilder
        +setClientSecret(String clientSecret): IGooglePhotosBuilder
        +setDownloaderType(FactoryDownloaderType type):IGooglePhotosBuilder
        +build(): GooglePhotos
    }

    class GooglePhotosBuilder implements IGooglePhotosBuilder {
        -gPhotos : GooglePhotos
    }

    class GooglePhotos {
        - gPhotosDownloader : IGooglePhotosDownloader
        - errorText : String

        {static}+ newBuilder(): IGooglePhotosBuilder
        + setDownloader(FactoryDownloaderType): void
        + downloadPhotos(): boolean
        + countDownloaded(): int
        + itemsToDownload(): int
        + getLastError(): String
        + hasError(): boolean
    }

    package downloaders {
        interface IGooglePhotosDownloader {
            +downloadPhotos(String startDate, String endDate,
            Path localFolder, String clientId, String clientSecret, String refreshToken): void
            +setItemDownloader(FactoryDownloaderType): void
        }

        class GooglePhotosDownloader implements IGooglePhotosDownloader, IObservable {
            - itemDownloader : IDownloader

            + setItemDownloader(FactoryDownloaderType): void
            + downloadPhotos(): void
        }
        GooglePhotosDownloader o-- IDownloader
        interface IObservable {
            +attachObserver(IObserver): void
            +dettachObserver(IObserver): void
            +notifyObservers(): void
        }
        interface IObserver {
            +updateObserver(): void
        }
    }


    GooglePhotos *-- IGooglePhotosDownloader
    GooglePhotos *-- IGooglePhotosBuilder


}



package ini {
    interface IIniConfig {
        IIniSection getSection(String sectionName)
        String getValue(String sectionName, String key)
        boolean containsKey(String sectionName, String key)
        boolean containsSection(String sectionName)

        void load(File file)
        void load(BufferedReader reader)
        void store(File file)

        void putComment(String sectionName, String comment)
        void putComment(String sectionName, String key, String comment)
        void putHeaderComment(String comment)
        String getComment(String sectionName, String key)
        String getHeaderComment()
        void putSection(String sectionName)
        void putValue(String sectionName, String key, String value)
        String toString()
    }

    interface IIniSection {
        String getValue(String key);
        boolean containsKey(String key);
        void putValue(String key, String value);
        void putComment(String key, String comment);
        String getComment(String key);
        String toString();
    }

    package custom {
        class CustomIIniConfig implements IIniConfig {
            - headerComment : String
            - sections : Map<String, IIniSection>
            - loader : ILoader

        }
        class CustomIIniSection implements IIniSection {
            - name : String
            - comment : String
            - items : List<CustomItem>
        }

        package loaders {
            interface ILoader {
                + load(IIniConfig ini, File file): void
                + load(IIniConfig ini, BufferedReader reader): void
            }

            package fsm {
                class LineLoader implements ILoader {
                }
            }

            package chain {
                class ChainOfResponsibilityLoader implements ILoader {
                    - processorChain : ProcessorChain
                    - contextState : IContextState
                }
                class ProcessorChain {
                    - processor : AbstractProcessor
                    + processLine(IContextState state, String line): void
                }

                ProcessorChain o-- IContextState
                ChainOfResponsibilityLoader *-- ProcessorChain
                ChainOfResponsibilityLoader *-- IContextState

                interface IContextState {
                }

                class ContextState implements IContextState {
                }

                package processors {
                    abstract class AbstractProcessor {
                        #nextProcessor : AbstractProcessor
                        +AbstractProcessor(AbstractProcessor nextProcessor)
                        +{abstract} processLine(String line): void
                    }
                    class BlankProcessor extends AbstractProcessor {
                    }
                    class CommentProcessor extends AbstractProcessor {
                    }
                    class ItemProcessor extends AbstractProcessor {
                    }
                    class SectionProcessor extends AbstractProcessor {
                    }
                    class InvalidStateProcessor extends AbstractProcessor {
                    }
                }
            }

        }


    }
}

}

@enduml
